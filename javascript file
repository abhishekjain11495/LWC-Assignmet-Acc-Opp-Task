import { LightningElement, track, wire, api } from 'lwc';
import oppData from '@salesforce/apex/GetDataThroughAccountController.oppData';
import taskData from '@salesforce/apex/GetDataThroughAccountController.taskData';

export default class AccountInsightsDashboard extends LightningElement {
  @api recordId
  @track opportunityData = [];
  @track taskkData = [];
  // JS Properties 
  pageSizeOptions = [5, 10, 25, 50, 75, 100]; //Page size options
  recordsOpp = []; //All records available in the data table
  recordsTask = []; //All records available in the data table
  columns = []; //columns information available in the data table
  totalTaskRecords = 0; //Total no.of records
  totalOppRecords = 0;
  pageSize; //No.of records to be displayed per page
  totalTaskPages; //Total no.of pages
  totalOppPages;
  pageNumber = 1; //Page number    


  ColumnsOpp = [
    { label: "Name", fieldName: "Name", type: "text" },
    { label: "StageName", fieldName: "StageName", type: "text" },
    { label: "Amount", fieldName: "Amount", type: "currency" }
  ];


  taskColumns = [
    { label: "Status", fieldName: "Status", type: "text" },
    { label: "Subject", fieldName: "Subject", type: "text" },
    { label: "Name", fieldName: "WhoId", type: "text" },
    { label: "DueDate", fieldName: "ActivityDate", type: "Date" }

  ];




  get bDisableFirst() {
    return this.pageNumber == 1;
  }

  get bDisableLast() {
    return this.pageNumber == this.totalOppPages;

  }

  get DisableLast() {
    return this.pageNumber == this.totalTaskPages;

  }

  
  @wire(oppData, { recordId: '$recordId' })
  wiredOppData({ error, data }) {
    if (data) {
      // console.log('RESULT--> ' + JSON.stringify(opportunityData));
      this.recordsOpp = data;
      this.totalOppRecords = this.recordsOpp.length; // update total records count                 
      this.pageSize = this.pageSizeOptions[0]; //set pageSize with default value as first option
      this.paginationHelper(); // call helper menthod to update pagination logic 
    }
    else if (error) {
      console.error('Error:', JSON.stringify(error));
    }
  }
  
  
  @wire(taskData, { recordId: '$recordId' })
  wiredtaskData({ error, data }) {
    if (data) {
      // console.log('RESULT--> ' + JSON.stringify(opportunityData));
      this.recordsTask = data;
      this.totalTaskRecords = this.recordsTask.length; // update total records count                 
      this.pageSize = this.pageSizeOptions[0]; //set pageSize with default value as first option
      this.paginationHelper(); // call helper menthod to update pagination logic 
    }
    else if (error) {
      console.error('Error:', JSON.stringify(error));
    }
  }

  handletaskClick() {
   // this.loaddata();
    window.location.reload();
  }

  handleOppClick() {
   // this.loaddata2();
   window.location.reload();
  }

  handleRecordsPerPage(event) {
    this.pageSize = event.target.value;
    this.paginationHelper();
  }

  previousPage() {
    this.pageNumber = this.pageNumber - 1;
    this.paginationHelper();
  }

  nextPage() {
    this.pageNumber = this.pageNumber + 1;
    this.paginationHelper();
  }

  firstPage() {
    this.pageNumber = 1;
    this.paginationHelper();
  }

  lastPage() {
    this.pageNumber = this.totalPages;
    this.paginationHelper();
  }


  // JS function to handel pagination logic 
  paginationHelper() {
    this.taskkData = [];
    this.opportunityData = [];
    // calculate total pages
    this.totalTaskPages = Math.ceil(this.totalTaskRecords / this.pageSize);
    this.totalOppPages = Math.ceil(this.totalOppRecords / this.pageSize);
    // set page number 
    if (this.pageNumber <= 1) {
      this.pageNumber = 1;
    } else if (this.pageNumber >= this.totalPages) {
      this.pageNumber = this.totalPages;
    }

    // set records to display on current page 
    for (let i = (this.pageNumber - 1) * this.pageSize; i < this.pageNumber * this.pageSize; i++) {
      if (i === this.totalRecords) {
        break;
      }
      this.opportunityData.push(this.recordsOpp[i]);
      this.taskkData.push(this.recordsTask[i]);
    }
  }
}
